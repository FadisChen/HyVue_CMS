---
description: 
globs: 
alwaysApply: false
---
# Bug修復情境指南

本文檔提供了在 HyVue CMS 系統中診斷和修復常見問題的指南。

## 常見問題類型

1. 組件渲染問題
2. 數據綁定問題
3. 事件處理問題
4. 路由和導航問題
5. 樣式和佈局問題

## 組件渲染問題

### 未顯示組件

檢查以下可能的原因：

- 引入路徑是否正確
- 元件名稱是否正確註冊
- 元件是否正確導出
- v-if/v-show條件是否滿足

```vue
<!-- 修正前 -->
<template>
  <DataTable v-if="isVisible" :items="items" />
</template>

<script setup>
import DataTable from '@/components/DataTable.vue'; // 可能的錯誤：文件名是 dataTable.vue (小寫d)
</script>

<!-- 修正後 -->
<template>
  <data-table v-if="isVisible" :items="items" />
</template>

<script setup>
import DataTable from '@/components/dataTable.vue'; // 正確的文件名
</script>
```

## 數據綁定問題

### 雙向綁定失效

確保使用了正確的 v-model 語法：

```vue
<!-- 修正前 -->
<template>
  <v-text-field :value="searchText" @input="updateSearch" />
</template>

<!-- 修正後 -->
<template>
  <v-text-field v-model="searchText" />
</template>
```

### 響應式丟失

確保使用了 ref 或 reactive：

```vue
<!-- 修正前 -->
<script setup>
let count = 0; // 非響應式變量

function increment() {
  count++; // 改變不會觸發重新渲染
}
</script>

<!-- 修正後 -->
<script setup>
import { ref } from 'vue';

const count = ref(0); // 響應式變量

function increment() {
  count.value++; // 改變會觸發重新渲染
}
</script>
```

## 事件處理問題

### 事件未觸發

檢查事件名稱是否正確：

```vue
<!-- 修正前 -->
<template>
  <v-btn @clicked="handleClick">點擊</v-btn>
</template>

<!-- 修正後 -->
<template>
  <v-btn @click="handleClick">點擊</v-btn>
</template>
```

### 自定義事件問題

確保正確使用 emits：

```vue
<!-- 子元件 - 修正前 -->
<script setup>
function notify() {
  this.$emit('update', { value: 'new data' }); // 錯誤方式
}
</script>

<!-- 子元件 - 修正後 -->
<script setup>
const emit = defineEmits(['update']);

function notify() {
  emit('update', { value: 'new data' }); // 正確方式
}
</script>
```

## 路由和導航問題

### 路由未匹配

檢查路由定義是否正確：

```js
// 修正前
const routes = [
  {
    path: 'user-profile', // 相對路徑沒有使用子路由
    component: UserProfile
  }
];

// 修正後
const routes = [
  {
    path: '/user-profile', // 絕對路徑
    component: UserProfile
  }
];

// 或作為子路由
const routes = [
  {
    path: '/',
    component: Layout,
    children: [
      {
        path: 'user-profile', // 在這裡使用相對路徑
        component: UserProfile
      }
    ]
  }
];
```

## 樣式和佈局問題

### 樣式不生效

確保使用了正確的作用域和選擇器：

```vue
<!-- 修正前 -->
<template>
  <div class="container">
    <div class="item">Item 1</div>
  </div>
</template>

<style>
.item { /* 沒有使用 scoped，可能會與其他元件衝突 */
  color: red;
}
</style>

<!-- 修正後 -->
<template>
  <div class="container">
    <div class="item">Item 1</div>
  </div>
</template>

<style scoped>
.item { /* 使用 scoped，限制在當前元件內 */
  color: red;
}
</style>
```

### 響應式佈局問題

確保正確使用 Vuetify 的網格系統：

```vue
<!-- 修正前 -->
<template>
  <v-row>
    <div class="col-6">左側</div> <!-- 未使用 v-col -->
    <div class="col-6">右側</div>
  </v-row>
</template>

<!-- 修正後 -->
<template>
  <v-row>
    <v-col cols="12" md="6">左側</v-col> <!-- 使用 v-col -->
    <v-col cols="12" md="6">右側</v-col>
  </v-row>
</template>
```

## 常見報錯處理

### "Failed to resolve component"

```
[Vue warn]: Failed to resolve component: DataTable
```

解決方案：檢查元件是否正確導入，以及是否使用正確的命名（駝峰或連字符）。

### "Property or method is not defined"

```
[Vue warn]: Property "items" was accessed during render but is not defined on instance.
```

解決方案：確保所有模板中使用的變量都已在 script 中定義。

### "Cannot read property 'x' of undefined"

解決方案：使用可選鏈操作符和預設值：

```vue
<!-- 修正前 -->
<template>
  <div>{{ user.profile.name }}</div> <!-- 如果 user 或 profile 是 undefined 會報錯 -->
</template>

<!-- 修正後 -->
<template>
  <div>{{ user?.profile?.name || '未設定名稱' }}</div> <!-- 使用可選鏈和預設值 -->
</template>
```

